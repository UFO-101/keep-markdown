{"version":3,"file":"content.js","sources":["../../node_modules/decode-named-character-reference/index.dom.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-encode/index.js","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/micromark-util-character/index.js","../../node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/micromark/lib/compile.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark/lib/parse.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/micromark/index.js","../../src/content.js"],"sourcesContent":["/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","const characterReferences = {'\"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'}\n\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n *   Value to encode.\n * @returns {string}\n *   Encoded value.\n */\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace)\n\n  /**\n   * @param {string} value\n   *   Value to replace.\n   * @returns {string}\n   *   Encoded value.\n   */\n  function replace(value) {\n    return (\n      '&' +\n      characterReferences[\n        /** @type {keyof typeof characterReferences} */ (value)\n      ] +\n      ';'\n    )\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * While micromark is a lexer/tokenizer, the common case of going from markdown\n * to html is currently built in as this module, even though the parts can be\n * used separately to build ASTs, CSTs, or many other output formats.\n *\n * Having an HTML compiler built in is useful because it allows us to check for\n * compliancy to CommonMark, the de facto norm of markdown, specified in roughly\n * 600 input/output cases.\n *\n * This module has an interface that accepts lists of events instead of the\n * whole at once, however, because markdown can’t be truly streaming, we buffer\n * events before processing and outputting the final result.\n */\n\n/**\n * @import {\n *   CompileContext,\n *   CompileData,\n *   CompileOptions,\n *   Compile,\n *   Definition,\n *   Event,\n *   Handle,\n *   HtmlExtension,\n *   LineEnding,\n *   NormalizedHtmlExtension,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef Media\n * @property {boolean | undefined} [image]\n * @property {string | undefined} [labelId]\n * @property {string | undefined} [label]\n * @property {string | undefined} [referenceId]\n * @property {string | undefined} [destination]\n * @property {string | undefined} [title]\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { push } from 'micromark-util-chunked';\nimport { combineHtmlExtensions } from 'micromark-util-combine-extensions';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { encode as _encode } from 'micromark-util-encode';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\nconst hasOwnProperty = {}.hasOwnProperty;\n\n/**\n * These two are allowlists of safe protocols for full URLs in respectively the\n * `href` (on `<a>`) and `src` (on `<img>`) attributes.\n * They are based on what is allowed on GitHub,\n * <https://github.com/syntax-tree/hast-util-sanitize/blob/9275b21/lib/github.json#L31>\n */\nconst protocolHref = /^(https?|ircs?|mailto|xmpp)$/i;\nconst protocolSource = /^https?$/i;\n\n/**\n * @param {CompileOptions | null | undefined} [options]\n * @returns {Compile}\n */\nexport function compile(options) {\n  const settings = options || {};\n\n  /**\n   * Tags is needed because according to markdown, links and emphasis and\n   * whatnot can exist in images, however, as HTML doesn’t allow content in\n   * images, the tags are ignored in the `alt` attribute, but the content\n   * remains.\n   *\n   * @type {boolean | undefined}\n   */\n  let tags = true;\n\n  /**\n   * An object to track identifiers to media (URLs and titles) defined with\n   * definitions.\n   *\n   * @type {Record<string, Definition>}\n   */\n  const definitions = {};\n\n  /**\n   * A lot of the handlers need to capture some of the output data, modify it\n   * somehow, and then deal with it.\n   * We do that by tracking a stack of buffers, that can be opened (with\n   * `buffer`) and closed (with `resume`) to access them.\n   *\n   * @type {Array<Array<string>>}\n   */\n  const buffers = [[]];\n\n  /**\n   * As we can have links in images and the other way around, where the deepest\n   * ones are closed first, we need to track which one we’re in.\n   *\n   * @type {Array<Media>}\n   */\n  const mediaStack = [];\n\n  /**\n   * Same as `mediaStack` for tightness, which is specific to lists.\n   * We need to track if we’re currently in a tight or loose container.\n   *\n   * @type {Array<boolean>}\n   */\n  const tightStack = [];\n\n  /** @type {HtmlExtension} */\n  const defaultHandlers = {\n    enter: {\n      blockQuote: onenterblockquote,\n      codeFenced: onentercodefenced,\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: onentercodeindented,\n      codeText: onentercodetext,\n      content: onentercontent,\n      definition: onenterdefinition,\n      definitionDestinationString: onenterdefinitiondestinationstring,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: onenteremphasis,\n      htmlFlow: onenterhtmlflow,\n      htmlText: onenterhtml,\n      image: onenterimage,\n      label: buffer,\n      link: onenterlink,\n      listItemMarker: onenterlistitemmarker,\n      listItemValue: onenterlistitemvalue,\n      listOrdered: onenterlistordered,\n      listUnordered: onenterlistunordered,\n      paragraph: onenterparagraph,\n      reference: buffer,\n      resource: onenterresource,\n      resourceDestinationString: onenterresourcedestinationstring,\n      resourceTitleString: buffer,\n      setextHeading: onentersetextheading,\n      strong: onenterstrong\n    },\n    exit: {\n      atxHeading: onexitatxheading,\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: onexitblockquote,\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: onexitflowcode,\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onresumedrop,\n      codeFlowValue: onexitcodeflowvalue,\n      codeIndented: onexitflowcode,\n      codeText: onexitcodetext,\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: onexitdefinition,\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: onexitemphasis,\n      hardBreakEscape: onexithardbreak,\n      hardBreakTrailing: onexithardbreak,\n      htmlFlow: onexithtml,\n      htmlFlowData: onexitdata,\n      htmlText: onexithtml,\n      htmlTextData: onexitdata,\n      image: onexitmedia,\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: onexitmedia,\n      listOrdered: onexitlistordered,\n      listUnordered: onexitlistunordered,\n      paragraph: onexitparagraph,\n      reference: onresumedrop,\n      referenceString: onexitreferencestring,\n      resource: onresumedrop,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      setextHeading: onexitsetextheading,\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: onexitstrong,\n      thematicBreak: onexitthematicbreak\n    }\n  };\n\n  /**\n   * Combine the HTML extensions with the default handlers.\n   * An HTML extension is an object whose fields are either `enter` or `exit`\n   * (reflecting whether a token is entered or exited).\n   * The values at such objects are names of tokens mapping to handlers.\n   * Handlers are called, respectively when a token is opener or closed, with\n   * that token, and a context as `this`.\n   */\n  const handlers = /** @type {NormalizedHtmlExtension} */\n  combineHtmlExtensions([defaultHandlers, ...(settings.htmlExtensions || [])]);\n\n  /**\n   * Handlers do often need to keep track of some state.\n   * That state is provided here as a key-value store (an object).\n   *\n   * @type {CompileData}\n   */\n  const data = {\n    definitions,\n    tightStack\n  };\n\n  /**\n   * The context for handlers references a couple of useful functions.\n   * In handlers from extensions, those can be accessed at `this`.\n   * For the handlers here, they can be accessed directly.\n   *\n   * @type {Omit<CompileContext, 'sliceSerialize'>}\n   */\n  const context = {\n    buffer,\n    encode,\n    getData,\n    lineEndingIfNeeded,\n    options: settings,\n    raw,\n    resume,\n    setData,\n    tag\n  };\n\n  /**\n   * Generally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\n   * markdown document over to the compiled HTML.\n   * In some cases, such as `> a`, CommonMark requires that extra line endings\n   * are added: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\n   * This variable hold the default line ending when given (or `undefined`),\n   * and in the latter case will be updated to the first found line ending if\n   * there is one.\n   */\n  let lineEndingStyle = settings.defaultLineEnding;\n\n  // Return the function that handles a slice of events.\n  return compile;\n\n  /**\n   * Deal w/ a slice of events.\n   * Return either the empty string if there’s nothing of note to return, or the\n   * result when done.\n   *\n   * @param {ReadonlyArray<Event>} events\n   * @returns {string}\n   */\n  function compile(events) {\n    let index = -1;\n    let start = 0;\n    /** @type {Array<number>} */\n    const listStack = [];\n    // As definitions can come after references, we need to figure out the media\n    // (urls and titles) defined by them before handling the references.\n    // So, we do sort of what HTML does: put metadata at the start (in head), and\n    // then put content after (`body`).\n    /** @type {Array<Event>} */\n    let head = [];\n    /** @type {Array<Event>} */\n    let body = [];\n    while (++index < events.length) {\n      // Figure out the line ending style used in the document.\n      if (!lineEndingStyle && (events[index][1].type === \"lineEnding\" || events[index][1].type === \"lineEndingBlank\")) {\n        lineEndingStyle = /** @type {LineEnding} */\n        events[index][2].sliceSerialize(events[index][1]);\n      }\n\n      // Preprocess lists to infer whether the list is loose or not.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          prepareList(events.slice(listStack.pop(), index));\n        }\n      }\n\n      // Move definitions to the front.\n      if (events[index][1].type === \"definition\") {\n        if (events[index][0] === 'enter') {\n          body = push(body, events.slice(start, index));\n          start = index;\n        } else {\n          head = push(head, events.slice(start, index + 1));\n          start = index + 1;\n        }\n      }\n    }\n    head = push(head, body);\n    head = push(head, events.slice(start));\n    index = -1;\n    const result = head;\n\n    // Handle the start of the document, if defined.\n    if (handlers.enter.null) {\n      handlers.enter.null.call(context);\n    }\n\n    // Handle all events.\n    while (++index < events.length) {\n      const handles = handlers[result[index][0]];\n      const kind = result[index][1].type;\n      const handle = handles[kind];\n      if (hasOwnProperty.call(handles, kind) && handle) {\n        handle.call({\n          sliceSerialize: result[index][2].sliceSerialize,\n          ...context\n        }, result[index][1]);\n      }\n    }\n\n    // Handle the end of the document, if defined.\n    if (handlers.exit.null) {\n      handlers.exit.null.call(context);\n    }\n    return buffers[0].join('');\n  }\n\n  /**\n   * Figure out whether lists are loose or not.\n   *\n   * @param {ReadonlyArray<Event>} slice\n   * @returns {undefined}\n   */\n  function prepareList(slice) {\n    const length = slice.length;\n    let index = 0; // Skip open.\n    let containerBalance = 0;\n    let loose = false;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index < length) {\n      const event = slice[index];\n      if (event[1]._container) {\n        atMarker = undefined;\n        if (event[0] === 'enter') {\n          containerBalance++;\n        } else {\n          containerBalance--;\n        }\n      } else switch (event[1].type) {\n        case \"listItemPrefix\":\n          {\n            if (event[0] === 'exit') {\n              atMarker = true;\n            }\n            break;\n          }\n        case \"linePrefix\":\n          {\n            // Ignore\n\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter' && !containerBalance) {\n              if (atMarker) {\n                atMarker = undefined;\n              } else {\n                loose = true;\n              }\n            }\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n    }\n    slice[0][1]._loose = loose;\n  }\n\n  /**\n   * @type {CompileContext['setData']}\n   */\n  function setData(key, value) {\n    // @ts-expect-error: assume `value` is omitted (`undefined` is passed) only\n    // if allowed.\n    data[key] = value;\n  }\n\n  /**\n   * @type {CompileContext['getData']}\n   */\n  function getData(key) {\n    return data[key];\n  }\n\n  /** @type {CompileContext['buffer']} */\n  function buffer() {\n    buffers.push([]);\n  }\n\n  /** @type {CompileContext['resume']} */\n  function resume() {\n    const buf = buffers.pop();\n    return buf.join('');\n  }\n\n  /** @type {CompileContext['tag']} */\n  function tag(value) {\n    if (!tags) return;\n    setData('lastWasTag', true);\n    buffers[buffers.length - 1].push(value);\n  }\n\n  /** @type {CompileContext['raw']} */\n  function raw(value) {\n    setData('lastWasTag');\n    buffers[buffers.length - 1].push(value);\n  }\n\n  /**\n   * Output an extra line ending.\n   *\n   * @returns {undefined}\n   */\n  function lineEnding() {\n    raw(lineEndingStyle || '\\n');\n  }\n\n  /** @type {CompileContext['lineEndingIfNeeded']} */\n  function lineEndingIfNeeded() {\n    const buffer = buffers[buffers.length - 1];\n    const slice = buffer[buffer.length - 1];\n    const previous = slice ? slice.charCodeAt(slice.length - 1) : null;\n    if (previous === 10 || previous === 13 || previous === null) {\n      return;\n    }\n    lineEnding();\n  }\n\n  /** @type {CompileContext['encode']} */\n  function encode(value) {\n    return getData('ignoreEncode') ? value : _encode(value);\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @returns {undefined}\n   */\n  function onresumedrop() {\n    resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered(token) {\n    tightStack.push(!token._loose);\n    lineEndingIfNeeded();\n    tag('<ol');\n    setData('expectFirstItem', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistunordered(token) {\n    tightStack.push(!token._loose);\n    lineEndingIfNeeded();\n    tag('<ul');\n    setData('expectFirstItem', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectFirstItem')) {\n      const value = Number.parseInt(this.sliceSerialize(token), 10);\n      if (value !== 1) {\n        tag(' start=\"' + encode(String(value)) + '\"');\n      }\n    }\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterlistitemmarker() {\n    if (getData('expectFirstItem')) {\n      tag('>');\n    } else {\n      onexitlistitem();\n    }\n    lineEndingIfNeeded();\n    tag('<li>');\n    setData('expectFirstItem');\n    // “Hack” to prevent a line ending from showing up if the item is empty.\n    setData('lastWasTag');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitlistordered() {\n    onexitlistitem();\n    tightStack.pop();\n    lineEnding();\n    tag('</ol>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitlistunordered() {\n    onexitlistitem();\n    tightStack.pop();\n    lineEnding();\n    tag('</ul>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitlistitem() {\n    if (getData('lastWasTag') && !getData('slurpAllLineEndings')) {\n      lineEndingIfNeeded();\n    }\n    tag('</li>');\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterblockquote() {\n    tightStack.push(false);\n    lineEndingIfNeeded();\n    tag('<blockquote>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitblockquote() {\n    tightStack.pop();\n    lineEndingIfNeeded();\n    tag('</blockquote>');\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterparagraph() {\n    if (!tightStack[tightStack.length - 1]) {\n      lineEndingIfNeeded();\n      tag('<p>');\n    }\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitparagraph() {\n    if (tightStack[tightStack.length - 1]) {\n      setData('slurpAllLineEndings', true);\n    } else {\n      tag('</p>');\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentercodefenced() {\n    lineEndingIfNeeded();\n    tag('<pre><code');\n    setData('fencesCount', 0);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const value = resume();\n    tag(' class=\"language-' + value + '\"');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    const count = getData('fencesCount') || 0;\n    if (!count) {\n      tag('>');\n      setData('slurpOneLineEnding', true);\n    }\n    setData('fencesCount', count + 1);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentercodeindented() {\n    lineEndingIfNeeded();\n    tag('<pre><code>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitflowcode() {\n    const count = getData('fencesCount');\n\n    // One special case is if we are inside a container, and the fenced code was\n    // not closed (meaning it runs to the end).\n    // In that case, the following line ending, is considered *outside* the\n    // fenced code and block quote by micromark, but CM wants to treat that\n    // ending as part of the code.\n    if (count !== undefined && count < 2 && data.tightStack.length > 0 && !getData('lastWasTag')) {\n      lineEnding();\n    }\n\n    // But in most cases, it’s simpler: when we’ve seen some data, emit an extra\n    // line ending when needed.\n    if (getData('flowCodeSeenData')) {\n      lineEndingIfNeeded();\n    }\n    tag('</code></pre>');\n    if (count !== undefined && count < 2) lineEndingIfNeeded();\n    setData('flowCodeSeenData');\n    setData('fencesCount');\n    setData('slurpOneLineEnding');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterimage() {\n    mediaStack.push({\n      image: true\n    });\n    tags = undefined; // Disallow tags.\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlink() {\n    mediaStack.push({});\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitlabeltext(token) {\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitlabel() {\n    mediaStack[mediaStack.length - 1].label = resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitreferencestring(token) {\n    mediaStack[mediaStack.length - 1].referenceId = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterresource() {\n    buffer(); // We can have line endings in the resource, ignore them.\n    mediaStack[mediaStack.length - 1].destination = '';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterresourcedestinationstring() {\n    buffer();\n    // Ignore encoding the result, as we’ll first percent encode the url and\n    // encode manually after.\n    setData('ignoreEncode', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitresourcedestinationstring() {\n    mediaStack[mediaStack.length - 1].destination = resume();\n    setData('ignoreEncode');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitresourcetitlestring() {\n    mediaStack[mediaStack.length - 1].title = resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitmedia() {\n    let index = mediaStack.length - 1; // Skip current.\n    const media = mediaStack[index];\n    const id = media.referenceId || media.labelId;\n    const context = media.destination === undefined ? definitions[normalizeIdentifier(id)] : media;\n    tags = true;\n    while (index--) {\n      if (mediaStack[index].image) {\n        tags = undefined;\n        break;\n      }\n    }\n    if (media.image) {\n      tag('<img src=\"' + sanitizeUri(context.destination, settings.allowDangerousProtocol ? undefined : protocolSource) + '\" alt=\"');\n      raw(media.label);\n      tag('\"');\n    } else {\n      tag('<a href=\"' + sanitizeUri(context.destination, settings.allowDangerousProtocol ? undefined : protocolHref) + '\"');\n    }\n    tag(context.title ? ' title=\"' + context.title + '\"' : '');\n    if (media.image) {\n      tag(' />');\n    } else {\n      tag('>');\n      raw(media.label);\n      tag('</a>');\n    }\n    mediaStack.pop();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterdefinition() {\n    buffer();\n    mediaStack.push({});\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    resume();\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterdefinitiondestinationstring() {\n    buffer();\n    setData('ignoreEncode', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    mediaStack[mediaStack.length - 1].destination = resume();\n    setData('ignoreEncode');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    mediaStack[mediaStack.length - 1].title = resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinition() {\n    const media = mediaStack[mediaStack.length - 1];\n    const id = normalizeIdentifier(media.labelId);\n    resume();\n    if (!hasOwnProperty.call(definitions, id)) {\n      definitions[id] = mediaStack[mediaStack.length - 1];\n    }\n    mediaStack.pop();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentercontent() {\n    setData('slurpAllLineEndings', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    // Exit for further sequences.\n    if (getData('headingRank')) return;\n    setData('headingRank', this.sliceSerialize(token).length);\n    lineEndingIfNeeded();\n    tag('<h' + getData('headingRank') + '>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentersetextheading() {\n    buffer();\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('slurpAllLineEndings', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheading() {\n    tag('</h' + getData('headingRank') + '>');\n    setData('headingRank');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    setData('headingRank', this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    const value = resume();\n    lineEndingIfNeeded();\n    tag('<h' + getData('headingRank') + '>');\n    raw(value);\n    tag('</h' + getData('headingRank') + '>');\n    setData('slurpAllLineEndings');\n    setData('headingRank');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdata(token) {\n    raw(encode(this.sliceSerialize(token)));\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitlineending(token) {\n    if (getData('slurpAllLineEndings')) {\n      return;\n    }\n    if (getData('slurpOneLineEnding')) {\n      setData('slurpOneLineEnding');\n      return;\n    }\n    if (getData('inCodeText')) {\n      raw(' ');\n      return;\n    }\n    raw(encode(this.sliceSerialize(token)));\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeflowvalue(token) {\n    raw(encode(this.sliceSerialize(token)));\n    setData('flowCodeSeenData', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexithardbreak() {\n    tag('<br />');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterhtmlflow() {\n    lineEndingIfNeeded();\n    onenterhtml();\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexithtml() {\n    setData('ignoreEncode');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterhtml() {\n    if (settings.allowDangerousHtml) {\n      setData('ignoreEncode', true);\n    }\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenteremphasis() {\n    tag('<em>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterstrong() {\n    tag('<strong>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onentercodetext() {\n    setData('inCodeText', true);\n    tag('<code>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitcodetext() {\n    setData('inCodeText');\n    tag('</code>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitemphasis() {\n    tag('</em>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitstrong() {\n    tag('</strong>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitthematicbreak() {\n    lineEndingIfNeeded();\n    tag('<hr />');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @param {Token} token\n   * @returns {undefined}\n   */\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const value = this.sliceSerialize(token);\n    const decoded = getData('characterReferenceType') ? decodeNumericCharacterReference(value, getData('characterReferenceType') === \"characterReferenceMarkerNumeric\" ? 10 : 16) : decodeNamedCharacterReference(value);\n\n    // `decodeNamedCharacterReference` can return `false` for invalid named\n    // character references,\n    // but everything we’ve tokenized is valid.\n    raw(encode(/** @type {string} */decoded));\n    setData('characterReferenceType');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    const uri = this.sliceSerialize(token);\n    tag('<a href=\"' + sanitizeUri(uri, settings.allowDangerousProtocol ? undefined : protocolHref) + '\">');\n    raw(encode(uri));\n    tag('</a>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    const uri = this.sliceSerialize(token);\n    tag('<a href=\"' + sanitizeUri('mailto:' + uri) + '\">');\n    raw(encode(uri));\n    tag('</a>');\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[text][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * @import {Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @typedef {import('micromark-util-types').Options} Options\n */\n\nimport { compile } from './lib/compile.js';\nimport { parse } from './lib/parse.js';\nimport { postprocess } from './lib/postprocess.js';\nimport { preprocess } from './lib/preprocess.js';\nexport { compile } from './lib/compile.js';\nexport { parse } from './lib/parse.js';\nexport { postprocess } from './lib/postprocess.js';\nexport { preprocess } from './lib/preprocess.js';\n\n/**\n * Compile markdown to HTML.\n *\n * > Note: which encodings are supported depends on the engine.\n * > For info on Node.js, see:\n * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n *\n * @overload\n * @param {Value} value\n *   Markdown to parse (`string` or `Uint8Array`).\n * @param {Encoding | null | undefined} encoding\n *   Character encoding to understand `value` as when it’s a `Uint8Array`\n *   (`string`, default: `'utf8'`).\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {string}\n *   Compiled HTML.\n *\n * @overload\n * @param {Value} value\n *   Markdown to parse (`string` or `Uint8Array`).\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {string}\n *   Compiled HTML.\n *\n * @param {Value} value\n *   Markdown to parse (`string` or `Uint8Array`).\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding to understand `value` as when it’s a `Uint8Array`\n *   (`string`, default: `'utf8'`).\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {string}\n *   Compiled HTML.\n */\nexport function micromark(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compile(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}","import {micromark} from 'micromark';\n\nconsole.log('Keep Markdown extension loaded!');\n\n// Add this near the top of the file, after the imports\nlet currentModalWidth = 75;  // Only keep width default\n\n// Create preview panel\nfunction createPreviewPanel(noteId) {\n    console.log('Creating preview panel:', noteId);\n    const preview = document.createElement('div');\n    preview.className = 'keep-md-preview';\n    preview.id = `keep-md-preview-${noteId}`;\n    return preview;\n}\n\nfunction handleNoteOpen(modalNote) {\n    console.log('Modal opened:', modalNote);\n    \n    // Check if preview already exists\n    if (modalNote.querySelector('.keep-md-preview')) {\n        console.log('Preview already exists');\n        return;\n    }\n\n    // Find the note content within the modal\n    const noteContent = modalNote.querySelector('.h1U9Be-YPqjbf');\n    if (!noteContent) {\n        console.log('No note content found');\n        return;\n    }\n\n    // Create a flex container for side-by-side layout\n    const container = document.createElement('div');\n    container.className = 'keep-md-container';\n    \n    // Move the note content into the container\n    const parent = noteContent.parentElement;\n    parent.insertBefore(container, noteContent);\n    container.appendChild(noteContent);\n\n    // Create preview\n    const preview = createPreviewPanel(Date.now());\n    container.appendChild(preview);\n\n    // Function to update preview\n    const updatePreview = () => {\n        const markdownText = noteContent.innerText\n            .replace(/^\"(.*)\"$/gm, '$1')    // Remove surrounding quotes\n            .replace(/\\\\n/g, '\\n')          // Handle newlines\n            .replace(/\\\\\"([^\"]+)\\\\\"/g, '\"$1\"') // Fix escaped quotes\n            .trim();\n        preview.innerHTML = micromark(markdownText);\n    };\n\n    // Initial render\n    updatePreview();\n\n    // Watch for content changes\n    const observer = new MutationObserver((mutations) => {\n        updatePreview();\n    });\n\n    observer.observe(noteContent, {\n        childList: true,\n        characterData: true,\n        subtree: true\n    });\n\n    console.log('Preview added:', preview.id);\n}\n\nfunction updateModalDimensions(width) {\n    // Update stored width value\n    if (width) currentModalWidth = width;\n    \n    const style = document.createElement('style');\n    style.textContent = `\n        /* Modal width only */\n        .VIpgJd-TUo6Hb.XKSfm-L9AdLc:has(.keep-md-preview) {\n            width: ${currentModalWidth}vw !important;\n            height: auto !important;\n            max-height: 95vh !important;\n        }\n\n        /* Allow modal to scroll if content is very tall */\n        .VIpgJd-TUo6Hb.XKSfm-L9AdLc:has(.keep-md-preview) .IZ65Hb-n0tgWb,\n        .VIpgJd-TUo6Hb.XKSfm-L9AdLc:has(.keep-md-preview) .IZ65Hb-TBnied,\n        .VIpgJd-TUo6Hb.XKSfm-L9AdLc:has(.keep-md-preview) .IZ65Hb-s2gQvd {\n            height: auto !important;\n            overflow-y: auto !important;\n        }\n\n        /* Container takes natural height */\n        .keep-md-container {\n            height: auto !important;\n        }\n    `;\n    \n    // Remove any previous style element we added\n    const existingStyle = document.getElementById('keep-md-modal-style');\n    if (existingStyle) {\n        existingStyle.remove();\n    }\n    \n    style.id = 'keep-md-modal-style';\n    document.head.appendChild(style);\n}\n\n// Update the message listener to only handle width\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.type === 'updateModalWidth') {\n        updateModalDimensions(message.value);\n    }\n});\n\n// Initialize\nfunction init() {\n    console.log('Initializing Keep Markdown');\n    \n    // Load saved width\n    chrome.storage.sync.get(['modalWidth'], function(result) {\n        if (result.modalWidth) currentModalWidth = result.modalWidth;\n        updateModalDimensions();\n    });\n    \n    // First check if modal is already open\n    const existingModal = document.querySelector('.VIpgJd-TUo6Hb');\n    if (existingModal) {\n        console.log('Found existing modal');\n        handleNoteOpen(existingModal);\n    }\n\n    // Watch for changes to the entire document\n    const observer = new MutationObserver((mutations) => {\n        console.log('Mutation detected:', mutations.length, 'changes');\n        \n        for (const mutation of mutations) {\n            // Check added nodes\n            for (const node of mutation.addedNodes) {\n                if (node.classList?.contains('VIpgJd-TUo6Hb')) {\n                    console.log('Modal added:', node);\n                    handleNoteOpen(node);\n                }\n            }\n            \n            // Also check for attribute changes that might indicate modal opening\n            if (mutation.type === 'attributes' && \n                mutation.target.classList?.contains('VIpgJd-TUo6Hb')) {\n                console.log('Modal attributes changed:', mutation.target);\n                handleNoteOpen(mutation.target);\n            }\n        }\n    });\n\n    // Observe everything\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        attributeFilter: ['class']\n    });\n}\n\n// Start when the page is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n} else {\n    init();\n} "],"names":["characterReference","list","hasOwnProperty","value","encode","compile","lineEnding","buffer","previous","_encode","context","content","document","constructs","text","attentionMarkers","effects","ok","nok","start","furtherStart","titleBefore","definition","flow","string","resolveText","exit","from"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]}